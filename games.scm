(define (games)
  (game)
  (newline)
  (show "Do you want to play again?")
  (newline)
  (let ((answer (read)))
    (if (member? answer '(yes yeah y no nope n))
        (if (member? answer '(yes yeah y))
            (games)
            (begin (newline)
                   (show "See you.")
                   (newline)))
        (begin (newline)
               (show "What do you mean by that? I can only consider it as no")
               (newline)
               (show "See you.")
               (newline)))))

(define (game)
  (newline)
  (show "***********************************")
  (show "Welcome to tic-tac-toe wonderland!")
  (show "***********************************")
  (show "Please choose your side: x or o?")
  (newline)
  (let ((player (read)))
    (if (member? player '(x o))
        (if (equal? player 'x)
            (play-ttt ask-user ttt)
            (play-ttt ttt ask-user))
        (begin (newline)
               (show "Well, I think you can only choose between x and o in tic-tac-toe.")
               (newline)
               (game)))))

(define (play-ttt x-strat o-strat)
  (play-ttt-helper x-strat o-strat '_________ 'x ""))

(define (play-ttt-helper x-strat o-strat position whose-turn last-move)
  (cond ((already-won? position (opponent whose-turn))
         (begin (newline)
                (print-position position)
                (display (opponent whose-turn))
                (display " wins at square ")
                (show last-move)))
        ((tie-game? position)
         (begin (newline)
                (print-position position)
                (display (opponent whose-turn))
                (display " makes a tie-game at ")
                (show last-move)))
        (else (let ((square (if (equal? whose-turn 'x)
                                (x-strat position 'x)
                                (o-strat position 'o))))
                (play-ttt-helper x-strat
                                 o-strat
                                 (add-move square whose-turn position)
                                 (opponent whose-turn)
                                 square)))))

(define (already-won? position who)
  (member? (word who who who) (find-triples position)))

(define (tie-game? position)
  (not (member? '_ position)))

(define (add-move square letter position)
  (if (= square 1)
      (word letter (bf position))
      (word (first position)
            (add-move (- square 1) letter (bf position)))))

(define (ask-user position letter)
  (newline)
  (print-position position)
  (display letter)
  (display "'s move: ")
  (let ((move (read)))
    (if (member? move (moves-filter position '(1 2 3 4 5 6 7 8 9)))
        move
        (begin
          (show "your move is illegal, please input your move again")
          (ask-user position letter)))))

(define (moves-filter position moves)
  (cond ((empty? position) moves)
        ((equal? '_ (first position))
         (cons (car moves) (moves-filter (bf position) (bf moves))))
        (else (moves-filter (bf position) (bf moves)))))

(define (print-position position)
  (print-row (subword position 1 3))
  (show "-+-+-")
  (print-row (subword position 4 6))
  (show "-+-+-")
  (print-row (subword position 7 9))
  (newline))

(define (print-row row)
  (maybe-display (first row))
  (display "|")
  (maybe-display (first (bf row)))
  (display "|")
  (maybe-display (last row))
  (newline))

(define (maybe-display letter)
  (if (not (equal? letter '_))
      (display letter)
      (display " ")))

(define (subword wd start end)
  ((repeated bf (- start 1))
   ((repeated bl (- (count wd) end))
    wd)))

(define (subword wd start end)
  (cond ((> start 1) (subword (bf wd) (- start 1) (- end 1)))
        ((< end (count wd)) (subword (bl wd) start end))
        (else wd)))
